var searchIndex = {};
searchIndex["syncbox"] = {"doc":"A collection of utilities for writing concurrent code.","items":[[3,"ArrayQueue","syncbox","A bounded, array-based queue, with compare-and-swap based operations.",null,null],[3,"DelayQueue","","An unbounded blocking queue of delayed values. When a value is pushed onto\nthe queue, a delay is included. The value will only be able to be popped\noff once the specified delay has expired. The head of the queue is the\nvalue whose delay is expired and furthest in the past.",null,null],[3,"Delay","","Associate a delay with a value.",null,null],[12,"0","","",0,null],[12,"1","","",0,null],[3,"LinkedQueue","","A queue in which values are contained by a linked list.",null,null],[3,"ThreadPool","","",null,null],[3,"ScheduledThreadPool","","A thread pool that can schedule tasks to run after a given delay, or to\nexecute periodically. Delayed tasks do not run before their associated\ndelays, but besides that, there are no real-time guarantees about exactly\nwhen the task will run.",null,null],[0,"atomic","","",null,null],[11,"new","core::sync::atomic","Creates a new `AtomicIsize`.",1,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",1,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",1,null],[11,"swap","","Stores a value into the isize, returning the old value.",1,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",1,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_exchange","","Stores a value into the `isize` if the current value is the same as the `current` value.",1,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the `isize if the current value is the same as the `current` value.",1,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",1,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",1,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",1,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",1,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",1,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fmt","","",1,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"atomicisize"}}],[3,"AtomicIsize","syncbox::atomic","A signed integer type which can be safely shared between threads.",null,null],[11,"fmt","core::sync::atomic","",2,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `AtomicUsize`.",2,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",2,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",2,null],[11,"swap","","Stores a value into the usize, returning the old value.",2,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",2,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_exchange","","Stores a value into the `usize` if the current value is the same as the `current` value.",2,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the `usize` if the current value is the same as the `current` value.",2,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current usize, returning the previous value.",2,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",2,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",2,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",2,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",2,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"atomicusize"}}],[3,"AtomicUsize","syncbox::atomic","An unsigned integer type which can be safely shared between threads.",null,null],[11,"clone","core::sync::atomic","",3,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"fmt","","",3,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"Ordering","syncbox::atomic","Atomic memory orderings",null,null],[13,"Relaxed","","No ordering constraints, only atomic operations. Corresponds to LLVM&#39;s\n`Monotonic` ordering.",3,null],[13,"Release","","When coupled with a store, all previous writes become visible\nto another thread that performs a load with `Acquire` ordering\non the same value.",3,null],[13,"Acquire","","When coupled with a load, all subsequent loads will see data\nwritten before a store with `Release` ordering on the same value\nin another thread.",3,null],[13,"AcqRel","","When coupled with a load, uses `Acquire` ordering, and with a store\n`Release` ordering.",3,null],[13,"SeqCst","","Like `AcqRel` with the additional guarantee that all threads see all\nsequentially consistent operations in the same order.",3,null],[5,"fence","","An atomic fence.",null,null],[3,"AtomicU64","","",null,null],[3,"AtomicI64","","",null,null],[3,"AtomicVal","","",null,null],[11,"new","","",4,{"inputs":[{"name":"u64"}],"output":{"name":"atomicu64"}}],[11,"load","","",4,{"inputs":[{"name":"atomicu64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"store","","",4,{"inputs":[{"name":"atomicu64"},{"name":"u64"},{"name":"ordering"}],"output":null}],[11,"swap","","",4,{"inputs":[{"name":"atomicu64"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"compare_and_swap","","",4,{"inputs":[{"name":"atomicu64"},{"name":"u64"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"fetch_add","","",4,{"inputs":[{"name":"atomicu64"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"fetch_sub","","",4,{"inputs":[{"name":"atomicu64"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"fetch_and","","",4,{"inputs":[{"name":"atomicu64"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"fetch_or","","",4,{"inputs":[{"name":"atomicu64"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"fetch_xor","","",4,{"inputs":[{"name":"atomicu64"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"new","","",5,{"inputs":[{"name":"i64"}],"output":{"name":"atomici64"}}],[11,"load","","",5,{"inputs":[{"name":"atomici64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"store","","",5,{"inputs":[{"name":"atomici64"},{"name":"i64"},{"name":"ordering"}],"output":null}],[11,"swap","","",5,{"inputs":[{"name":"atomici64"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"compare_and_swap","","",5,{"inputs":[{"name":"atomici64"},{"name":"i64"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"fetch_add","","",5,{"inputs":[{"name":"atomici64"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"fetch_sub","","",5,{"inputs":[{"name":"atomici64"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"fetch_and","","",5,{"inputs":[{"name":"atomici64"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"fetch_or","","",5,{"inputs":[{"name":"atomici64"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"fetch_xor","","",5,{"inputs":[{"name":"atomici64"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[8,"Atomic","","An atomic box",null,null],[10,"new","","Returns a new atomic box",6,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[10,"load","","Atomically loads the value from the box with the given ordering",6,{"inputs":[{"name":"atomic"},{"name":"ordering"}],"output":{"name":"t"}}],[10,"store","","Atomically stores the value from the box with the given ordering",6,{"inputs":[{"name":"atomic"},{"name":"t"},{"name":"ordering"}],"output":null}],[10,"swap","","Atomically swaps the value in the box with the given ordering",6,{"inputs":[{"name":"atomic"},{"name":"t"},{"name":"ordering"}],"output":{"name":"t"}}],[10,"compare_and_swap","","Swaps the value in the box if and only if the existing value is equal\nto `old`.",6,{"inputs":[{"name":"atomic"},{"name":"t"},{"name":"t"},{"name":"ordering"}],"output":{"name":"t"}}],[8,"ToAtomicRepr","","A value that can be stored in an atomic box",null,null],[16,"Repr","","The representation of the value when stored in an atomic box.",7,null],[10,"from_repr","","Load the value from the raw representation",7,{"inputs":[{"name":"repr"}],"output":{"name":"self"}}],[10,"to_repr","","Convert the value from the raw representation",7,{"inputs":[{"name":"toatomicrepr"}],"output":{"name":"repr"}}],[11,"new","","Returns a new atomic box",8,{"inputs":[{"name":"t"}],"output":{"name":"atomicval"}}],[11,"new","","Returns a new atomic box",8,{"inputs":[{"name":"t"}],"output":{"name":"atomicval"}}],[11,"load","","Atomically loads the value from the box with the given ordering",8,{"inputs":[{"name":"atomicval"},{"name":"ordering"}],"output":{"name":"t"}}],[11,"store","","Atomically stores the value from the box with the given ordering",8,{"inputs":[{"name":"atomicval"},{"name":"t"},{"name":"ordering"}],"output":null}],[11,"swap","","Atomically swaps the value in the box with the given ordering",8,{"inputs":[{"name":"atomicval"},{"name":"t"},{"name":"ordering"}],"output":{"name":"t"}}],[11,"compare_and_swap","","Swaps the value in the box if and only if the existing value is equal\nto `old`.",8,{"inputs":[{"name":"atomicval"},{"name":"t"},{"name":"t"},{"name":"ordering"}],"output":{"name":"t"}}],[11,"new","","",2,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","",2,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","",2,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":null}],[11,"swap","","",2,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","",2,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"with_capacity","syncbox","Constructs a new, empty `ArrayQueue&lt;T&gt;` with the specified capacity.",9,{"inputs":[{"name":"usize"}],"output":{"name":"arrayqueue"}}],[11,"push","","Adds the element `e` to the queue if possible.",9,{"inputs":[{"name":"arrayqueue"},{"name":"t"}],"output":{"name":"result"}}],[11,"pop","","Takes from the queue if there is an element available.",9,{"inputs":[{"name":"arrayqueue"}],"output":{"name":"option"}}],[11,"clone","","",9,{"inputs":[{"name":"arrayqueue"}],"output":{"name":"arrayqueue"}}],[11,"delay","core::option","",10,{"inputs":[{"name":"option"}],"output":{"name":"duration"}}],[11,"fmt","syncbox","",0,{"inputs":[{"name":"delay"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"delay"},{"name":"delay"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"delay"},{"name":"delay"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"delay"},{"name":"delay"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"delay"},{"name":"delay"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"delay"},{"name":"delay"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"delay"},{"name":"delay"}],"output":{"name":"ordering"}}],[11,"eq","","",0,{"inputs":[{"name":"delay"},{"name":"delay"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"delay"},{"name":"delay"}],"output":{"name":"bool"}}],[11,"unwrap","","Moves the value out of the `Delay&lt;T&gt;`.",0,{"inputs":[{"name":"delay"}],"output":{"name":"t"}}],[11,"delay","","",0,{"inputs":[{"name":"delay"}],"output":{"name":"duration"}}],[11,"deref","","",0,{"inputs":[{"name":"delay"}],"output":{"name":"t"}}],[11,"deref_mut","","",0,{"inputs":[{"name":"delay"}],"output":{"name":"t"}}],[11,"new","","Constructs a new `DelayQueue`.",11,{"inputs":[],"output":{"name":"delayqueue"}}],[11,"poll_timeout","","Takes from the queue, blocking for up to `timeout`.",11,{"inputs":[{"name":"delayqueue"},{"name":"duration"}],"output":{"name":"option"}}],[11,"poll","","",11,{"inputs":[{"name":"delayqueue"}],"output":{"name":"option"}}],[11,"is_empty","","",11,{"inputs":[{"name":"delayqueue"}],"output":{"name":"bool"}}],[11,"offer","","",11,{"inputs":[{"name":"delayqueue"},{"name":"t"}],"output":{"name":"result"}}],[11,"take","","",11,{"inputs":[{"name":"delayqueue"}],"output":{"name":"t"}}],[11,"put","","",11,{"inputs":[{"name":"delayqueue"},{"name":"t"}],"output":null}],[11,"clone","","",11,{"inputs":[{"name":"delayqueue"}],"output":{"name":"delayqueue"}}],[11,"new","","Constructs a new, empty `LinkedQueue&lt;T&gt;` with capacity `usize::MAX`.",12,{"inputs":[],"output":{"name":"linkedqueue"}}],[11,"with_capacity","","Constructs a new, empty `LinkedQueue&lt;T&gt;` with the specified capacity.",12,{"inputs":[{"name":"usize"}],"output":{"name":"linkedqueue"}}],[11,"len","","Returns the number of elements in the queue.",12,{"inputs":[{"name":"linkedqueue"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the queue contains no elements.",12,{"inputs":[{"name":"linkedqueue"}],"output":{"name":"bool"}}],[11,"offer","","Adds the element `e` to the queue if possible.",12,{"inputs":[{"name":"linkedqueue"},{"name":"t"}],"output":{"name":"result"}}],[11,"offer_ms","","Adds the element `e` to the queue, blocking for up to `ms` milliseconds.",12,{"inputs":[{"name":"linkedqueue"},{"name":"t"},{"name":"u32"}],"output":{"name":"result"}}],[11,"put","","Adds the element `e` to the queue, blocking until it can be added.",12,{"inputs":[{"name":"linkedqueue"},{"name":"t"}],"output":null}],[11,"poll","","Takes from the queue if there is an element available.",12,{"inputs":[{"name":"linkedqueue"}],"output":{"name":"option"}}],[11,"poll_ms","","Takes from the queue, blocking for up to `ms` milliseconds.",12,{"inputs":[{"name":"linkedqueue"},{"name":"u32"}],"output":{"name":"option"}}],[11,"take","","Takes from the queue, blocking until there is an element available.",12,{"inputs":[{"name":"linkedqueue"}],"output":{"name":"t"}}],[11,"poll","","",12,{"inputs":[{"name":"linkedqueue"}],"output":{"name":"option"}}],[11,"is_empty","","",12,{"inputs":[{"name":"linkedqueue"}],"output":{"name":"bool"}}],[11,"offer","","",12,{"inputs":[{"name":"linkedqueue"},{"name":"t"}],"output":{"name":"result"}}],[11,"take","","",12,{"inputs":[{"name":"linkedqueue"}],"output":{"name":"t"}}],[11,"put","","",12,{"inputs":[{"name":"linkedqueue"},{"name":"t"}],"output":null}],[11,"clone","","",12,{"inputs":[{"name":"linkedqueue"}],"output":{"name":"linkedqueue"}}],[11,"fixed_size","","",13,{"inputs":[{"name":"u32"}],"output":{"name":"threadpool"}}],[11,"single_thread","","",13,{"inputs":[],"output":{"name":"threadpool"}}],[11,"new","","",13,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"q"}],"output":{"name":"threadpool"}}],[11,"prestart_core_thread","","",13,{"inputs":[{"name":"threadpool"}],"output":null}],[11,"prestart_all_core_threads","","",13,{"inputs":[{"name":"threadpool"}],"output":null}],[11,"shutdown","","",13,{"inputs":[{"name":"threadpool"}],"output":null}],[11,"shutdown_now","","",13,{"inputs":[{"name":"threadpool"}],"output":null}],[11,"is_shutdown","","",13,{"inputs":[{"name":"threadpool"}],"output":{"name":"bool"}}],[11,"await_termination","","",13,{"inputs":[{"name":"threadpool"}],"output":null}],[11,"run","","",13,{"inputs":[{"name":"threadpool"},{"name":"t"}],"output":null}],[11,"clone","","",13,{"inputs":[{"name":"threadpool"}],"output":{"name":"threadpool"}}],[11,"fixed_size","","",14,{"inputs":[{"name":"u32"}],"output":{"name":"scheduledthreadpool"}}],[11,"single_thread","","",14,{"inputs":[],"output":{"name":"scheduledthreadpool"}}],[11,"schedule_ms","","",14,{"inputs":[{"name":"scheduledthreadpool"},{"name":"u32"},{"name":"t"}],"output":null}],[11,"run","","",14,{"inputs":[{"name":"scheduledthreadpool"},{"name":"t"}],"output":null}],[11,"clone","","",14,{"inputs":[{"name":"scheduledthreadpool"}],"output":{"name":"scheduledthreadpool"}}],[11,"run","alloc::boxed","",15,{"inputs":[{"name":"box"}],"output":null}],[8,"Delayed","syncbox","A value that should not be used until the delay has expired.",null,null],[10,"delay","","Returns he delay associated with the value.",16,{"inputs":[{"name":"delayed"}],"output":{"name":"duration"}}],[8,"Queue","","An interface for queues of elements of type `T`.",null,null],[10,"poll","","Takes from the queue if there is an element available.",17,{"inputs":[{"name":"queue"}],"output":{"name":"option"}}],[10,"is_empty","","Returns `true` if the queue contains no elements.",17,{"inputs":[{"name":"queue"}],"output":{"name":"bool"}}],[10,"offer","","Adds the element `e` to the queue if possible.",17,{"inputs":[{"name":"queue"},{"name":"t"}],"output":{"name":"result"}}],[8,"SyncQueue","","An interface for synchronous queues of elements of type `T`.",null,null],[10,"take","","Takes from the queue, blocking until there is an element available.",18,{"inputs":[{"name":"syncqueue"}],"output":{"name":"t"}}],[10,"put","","Adds the element `e` to the queue, blocking until it can be added.",18,{"inputs":[{"name":"syncqueue"},{"name":"t"}],"output":null}],[8,"Run","","",null,null],[10,"run","","Runs the task on the underlying executor.",19,{"inputs":[{"name":"run"},{"name":"t"}],"output":null}],[8,"Task","","A value that can run a unit of work.",null,null],[10,"run","","Run the unit of work",20,{"inputs":[{"name":"task"}],"output":null}],[8,"TaskBox","","",null,null],[10,"run_boxes","","",21,{"inputs":[{"name":"taskbox"}],"output":null}]],"paths":[[3,"Delay"],[3,"AtomicIsize"],[3,"AtomicUsize"],[4,"Ordering"],[3,"AtomicU64"],[3,"AtomicI64"],[8,"Atomic"],[8,"ToAtomicRepr"],[3,"AtomicVal"],[3,"ArrayQueue"],[4,"Option"],[3,"DelayQueue"],[3,"LinkedQueue"],[3,"ThreadPool"],[3,"ScheduledThreadPool"],[3,"Box"],[8,"Delayed"],[8,"Queue"],[8,"SyncQueue"],[8,"Run"],[8,"Task"],[8,"TaskBox"]]};
initSearch(searchIndex);
